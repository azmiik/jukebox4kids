#!/usr/bin/env python

import sys
import os
import serial
import time
import string
import subprocess

playlist_dir = "/var/lib/mpd/playlists"
trackcount = 0
current_track = 1

def getTrackCount():
   process = subprocess.Popen(['mpc playlist | wc -l'], shell=True, stdout=subprocess.PIPE)
   (st, er) = process.communicate()
   tcount = 0
   try:
      tcount = int(st.strip())
   except ValueError, ex:
      print '"%s" cannot be converted to an int: %s' % (value, ex)
   return tcount

def loadPlaylist(pls):
   global current_track
   global trackcount
   pls_file = os.path.join(playlist_dir, "%s.m3u" % pls)
   print pls_file
   if os.path.exists(pls_file):
      print "loading playlist: %s" % pls
      os.system("mpc stop")
      os.system("mpc clear")
      os.system("mpc load %s" % pls)
      trackcount = getTrackCount()
      current_track = 1
      if trackcount > 0:
         os.system("mpc play 1")
   else:
      print "playlist not found!"

def sendButton(button, ser):
   global current_track
   global trackcount
   temp = current_track
   if trackcount == 0:
      trackcount = getTrackCount()
      if trackcount > 0:
         current_track = 1 
   if button == '1':
      if current_track > 1:
         current_track = current_track - 1
         os.system("mpc play %d " % current_track)
   if button == '2':
      os.system("mpc toggle")
   if button == '3':
      if current_track < trackcount:
         current_track = current_track + 1
         os.system("mpc play %d " % current_track)

def update_display(ser):
   global current_track
   d1 = str(current_track / 10)[0]
   d0 = str(current_track % 10)[0]
   cmd = '/L:%s%s\n' % (d1, d0)
   ser.write(cmd)
   ser.flush()


def main(argv):
   global current_track, trackcount
   print "connect to serial ..."
   #ser = serial.Serial('/dev/pts/2', 115200, timeout=0)
   ser = serial.Serial('/dev/ttyAMA0', 115200, timeout=0)
   ser.write('fooo\n')
   print("connected")
   # send heart beat
   ser.write('/H:foo\n')
   # send i'm online
   ser.write('/O:foo\n')
   ser.flush()
   data = []
   parse_data = False
   current_barcode = ""
   update_display(ser)
   while(1):
      try:
         buf = ser.read(100)
         if len(buf) > 0:
            for d in buf:
               #print ord(d)
               if ord(d) == 13 or ord(d) == 10:
                  parse_data = True
               else:   
                  data.append(d)               
         if parse_data:
            parse_data = False
            print data
            if not data[0] == '/':
               # error
               print "protocol error, message: %s" % data
            if data[1] == 'B' and len(data) > 10:
               # barcode id
               barcode = string.join(data[3:-1], "")
               print "receiving barcode: %s" % barcode
               if not barcode == current_barcode:
                  current_barcode = barcode
                  loadPlaylist(barcode)
            if data[1] == 'S' and len(data) > 3:
               button_index = data[3]
               print "button %s pressed" % button_index
               sendButton(button_index, ser)
            #print data
            data = []
            update_display(ser)

            
         # sleep for 10ms
         time.sleep(0.01)
         #print "-"
      except Exception as ex:
         print 'Error: an error occurred during execution: %s' % (ex)
         current_barcode = ""
         current_track = 0
         trackcount = 0
   ser.close()
   
   
if __name__ == "__main__":
   main(sys.argv[1:])
    
    

